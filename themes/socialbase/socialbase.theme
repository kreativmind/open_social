<?php
/**
 * @file
 * The primary PHP file for the Social base theme.
 */

use Symfony\Cmf\Component\Routing\RouteObjectInterface;
use Drupal\image\Entity\ImageStyle;
use Drupal\file\Entity\File;
use Drupal\block_content\Entity\BlockContent;
use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Html as HtmlUtility;
use \Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function socialbase_form_social_user_password_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['mail']['#prefix'] = '<div class="help-block">';
  $form['mail']['#suffix'] = '</div>';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function socialbase_form_social_post_entity_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['field_visibility']['#prefix'] = '<div class="form-group media"><div class="media-body">';
  $form['field_visibility']['#suffix'] = '</div>';

  // This needs to be save on post/*/edit pages.
  $form['actions']['submit']['#prefix'] = '<div class="media-right">';
  $form['actions']['submit']['#suffix'] = '</div>';

  unset($form['actions']['delete']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function socialbase_form_comment_post_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form['field_comment_body']['#prefix'] = '<div class="media-body"><div class="form-group form-group-inline clearfix text-right">';
  $form['actions']['submit']['#suffix'] = '</div></div>';
  if(isset($form['actions']['submit']['#button_type'])) {
    $form['actions']['submit']['#button_type'] = 'flat';
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function socialbase_form_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['field_comment_body']['widget'][0]['#title'] = '';
  if(isset($form['actions']['submit']['#button_type'])) {
    $form['actions']['submit']['#button_type'] = 'primary';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function socialbase_form_node_event_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['field_event_address'])) {
    $form['field_event_address']['widget'][0]['#title'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function socialbase_form_profile_profile_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['field_profile_address'])) {
    $form['field_profile_address']['widget'][0]['#title'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function socialbase_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Set correct button styles.
  $forms = array(
    'user_form',
    'user_cancel_form',
    'profile_profile_edit_form',
    'group_open_group_add_form',
    'group_open_group_edit_form',
    'group_content_open_group-group_membership_add_form',
    'group_content_open_group-group_membership_edit_form',
    'post_delete_form',
    'node_event_delete_form',
    'group_open_group_delete_form',
    'comment_comment_delete_form',
    'comment_post_comment_delete_form',
    'group_content_open_group-group_membership_group-leave_form',
    'group_content_open_group-group_membership_group-join_form'
  );

  if (in_array($form_id, $forms)) {
    if(isset($form['actions']['delete'])) {
      $form['actions']['delete']['#attributes']['class'][] =  'btn btn-default btn-raised';
    }
    if(isset($form['actions']['submit'])) {
      $form['actions']['submit']['#attributes']['class'][] =  'btn-raised';
    }
    if(isset($form['actions']['cancel'])) {
      $form['actions']['cancel']['#attributes']['class'][] = 'btn btn-default btn-raised';
    }
  }

  /**
  * List all the confirmation forms here. We need to close the card before showing the actions.
  */

  $confirm_forms = array (
    'user_cancel_form',
    'post_delete_form',
    'node_event_delete_form',
    'node_topic_delete_form',
    'group_open_group_delete_form',
    'comment_comment_delete_form',
    'comment_post_comment_delete_form',
    'group_content_open_group-group_membership_group-leave_form',
  );

  if (in_array($form_id, $confirm_forms)) {
    $form['description']['#prefix'] = '<div class="clearfix">';
    $form['description']['#suffix'] = '</div></div></div>';
  }

  if ($form_id == 'group_content_open_group-group_membership_group-join_form') {
    $form['#attributes']['class'][] = 'card';
    $form['info_text']['#suffix'] = '</div></div>';
  }

  if ($form_id == 'contact_message_general_contact_form_form') {
    $form['#attributes']['class'][] = 'card';
    $form['actions']['#prefix'] = '</div></div>';
  }

  if ($form_id == 'user_register_form' || $form_id == 'social_user_login_form' ||  $form_id == 'social_user_password_form' ) {
    $form['#attributes']['class'][] = 'card';
    $form['actions']['#prefix'] = '</div></div>';
  }
}



/**
 * Implements hook_form_BASE_ID_alter().
 */
function socialbase_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if(isset($form['actions']['delete'])) {
    $form['actions']['delete']['#attributes']['class'][] = 'btn btn-default btn-raised';
  }
  if(isset($form['actions']['preview'])) {
    $form['actions']['preview']['#attributes']['class'][] =  'btn-raised';
  }
  if(isset($form['actions']['submit'])) {
    $form['actions']['submit']['#attributes']['class'][] =  'btn-raised';
  }
  if(isset($form['actions']['publish'])) {
    $form['actions']['publish']['#attributes']['class'][] =  'btn-primary';
    $form['actions']['publish']['#attributes']['class'][] =  'btn-raised';
  }
  if(isset($form['actions']['unpublish'])) {
    $form['actions']['unpublish']['#attributes']['class'][] =  'btn-primary';
    $form['actions']['unpublish']['#attributes']['class'][] =  'btn-raised';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_details_alter(array &$suggestions, array $variables, $hook) {
  $suggestions[] = $hook . '__plain';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $block_id = $variables['elements']['#id'];
  $blocks_id = array(
    'views_block__upcoming_events_block_my_upcoming_events',
    'views_block__upcoming_events_block_community_events',
    'views_block__latest_topics_default',
    'views_block__newest_groups_block_newest_groups',
    'views_block__newest_users_block_newest_users',
    'views_block__newest_users_block_newest_users',

    'views_block__events_block_events_on_profile',
    'views_block__topics_block_user_topics',
    'views_block__groups_block_user_groups',
    'views_block__group_members_block_newest_members', // override block--views-block--group_members-block-newest-members.html.twig
    'views_block__upcoming_events_upcoming_events_group',
    'views_block__latest_topics_group_topics_block',
  );
  if (in_array($block_id, $blocks_id)) {
    $suggestions = array($variables['theme_hook_original'] . '__' . 'views_block__sidebar');
  }
}

/**
 * Implements hook_preprocess_block().
 */
function socialbase_preprocess_block(&$variables) {
  $profile_user_id = \Drupal::routeMatch()->getParameter('user');
  $group = \Drupal::routeMatch()->getParameter('group');
  $block = \Drupal\block\Entity\Block::load($variables['elements']['#id']);


  $variables['card'] = FALSE;
  $region = $block->getRegion();
  $regions_card = ['complementary', 'content_top', 'content_bottom'];

  if (in_array($region, $regions_card)) {
    $variables['card'] = TRUE;
  }

  if (!is_null($profile_user_id) && is_object($profile_user_id)) {
    $profile_user_id = $profile_user_id->id();
  }
  $variables['content']['#attributes']['block'] = $variables['attributes']['id'];

  // Fix label for Views exposed filter blocks.
  if (!empty($variables['configuration']['views_label']) && empty($variables['configuration']['label'])) {
    $variables['label'] = $variables['configuration']['views_label'];
  }

  // Check if the block is a views exposed form filter, add condition to add
  // classes in twig file.
  if (isset($variables['content']['#form_id']) && $variables['content']['#form_id'] == 'views_exposed_form') {
    $variables['complementary'] = TRUE;
  }

  // Add search_block to account menu.
  if ($variables['attributes']['id'] == 'block-socialbase-account-menu') {
    $block = Block::load('search_content_block_header');
    if(!empty($block)){
      $block_output = \Drupal::entityManager()
        ->getViewBuilder('block')
        ->view($block);

      $variables['content']['links']['search_block'] = $block_output;
    }
  }

  // Preprocess search block header.
  if (isset($variables['content']['search_content_form'])) {
    if ($variables['elements']['#id'] != 'search_content_block_title') {
      $variables['content']['search_content_form']['#attributes']['role'] = 'search';
      $variables['content']['search_content_form']['#attributes']['class'][] = 'navbar-form';
      $variables['content']['search_content_form']['#attributes']['class'][] = 'navbar-left';
      $variables['content']['search_content_form']['actions']['submit']['#is_button'] = FALSE;
      $variables['content']['search_content_form']['actions']['submit']['#addsearchicon'] = TRUE;
    }
    else {
      // @TODO: Replace with SVG icon.
      $variables['content']['search_content_form']['actions']['submit']['#suffix'] = '<span class="search-icon"><i class="material-icons">search</i></span>';
      $variables['content']['search_content_form']['#attributes']['class'][] = 'hero-form';
      $variables['content']['search_content_form']['#attributes']['role'] = 'search';
      $variables['content']['search_content_form']['actions']['submit']['#is_button'] = FALSE;
      $variables['content']['search_content_form']['#id'] = 'search-content-form-hero';
    }
  }
  if (isset($variables['content']['search_users_form'])) {
    // Add class for the forms as well.
    $variables['content']['search_users_form']['#attributes']['class'][] = 'hero-form';
    $variables['content']['search_users_form']['#attributes']['role'] = 'search';
    $variables['content']['search_users_form']['actions']['submit']['#is_button'] = FALSE;
    $variables['content']['search_users_form']['search_input_users']['#name'] = 'search_input_users';
    // @TODO: Replace with SVG icon.
    $variables['content']['search_users_form']['actions']['submit']['#suffix'] = '<span class="search-icon"><i class="material-icons">search</i></span>';
  }
  if (isset($variables['content']['search_groups_form'])) {
    $variables['content']['search_groups_form']['#attributes']['class'][] = 'hero-form';
    $variables['content']['search_groups_form']['#attributes']['role'] = 'search';
    $variables['content']['search_groups_form']['actions']['submit']['#is_button'] = FALSE;
    $variables['content']['search_groups_form']['search_input_groups']['#name'] = 'search_input_groups';
    // @TODO: Replace with SVG icon.
    $variables['content']['search_groups_form']['actions']['submit']['#suffix'] = '<span class="search-icon"><i class="material-icons">search</i></span>';
  }

  // Add Group ID for "See all groups link".
  if ($variables['attributes']['id'] === 'block-views-block-group-members-block-newest-members') {
    $variables['group_id'] = $group->id();
  }

  // Add User ID for "See all link".
  if (
    $variables['attributes']['id'] === 'block-views-block-events-block-events-on-profile' ||
    $variables['attributes']['id'] === 'block-views-block-topics-block-user-topics' ||
    $variables['attributes']['id'] === 'block-views-block-groups-block-user-groups'
  ) {
    $profile_user_id = \Drupal::routeMatch()->getParameter('user');
    if (!is_null($profile_user_id) && is_object($profile_user_id)) {
      $profile_user_id = $profile_user_id->id();
    }
    $variables['profile_user_id'] = $profile_user_id;
  }

  // AN Homepage block.
  if ($variables['attributes']['id'] === 'block-anhomepageheroblock') {
    $imageitem = $variables['content']['field_hero_image'][0]['#item']->getEntity();
    $imagestyle = $variables['content']['field_hero_image'][0]['#image_style'];
    $entity = BlockContent::load($imageitem->id());
    $file_id = $entity->get('field_hero_image')->target_id;

    // If it's an existing file.
    if ($file = File::load($file_id)) {
      // Style and set it in the content.
      $styled_image_url = ImageStyle::load($imagestyle)
        ->buildUrl($file->getFileUri());
      $variables['image_url'] = $styled_image_url;

      // Add extra class.
      $variables['has_image'] = TRUE;

      // Remove the origingal.
      unset($variables['content']['field_hero_image']);

    }
  } // AN Homepage block.



  // Add variables to sidebar blocks
  switch ($variables['elements']['#id']) {
    case 'views_block__upcoming_events_block_my_upcoming_events':
      $variables['view_all_path'] = 'my-events';
      break;
    case 'views_block__upcoming_events_block_community_events':
      $variables['subtitle'] = t('in the community');
      $variables['view_all_path'] = 'community-events';
      break;
    case 'views_block__latest_topics_default':
      $variables['subtitle'] = t('in the community');
      $variables['view_all_path'] = 'newest-topics';
      break;
    case 'views_block__newest_groups_block_newest_groups':
      $variables['subtitle'] = t('in the community');
      $variables['view_all_path'] = 'all-groups';
      break;
    case 'views_block__newest_users_block_newest_users':
      $variables['subtitle'] = t('in the community');
      $variables['view_all_path'] = 'newest-members';
      break;
    case 'views_block__events_block_events_on_profile':
      $variables['subtitle'] = t('for this user');
      $variables['view_all_path'] = Url::fromRoute('view.events.events_overview', array('user' => $profile_user_id));
      break;
    case 'views_block__topics_block_user_topics':
      $variables['subtitle'] = t('for this user');
      $variables['view_all_path'] = Url::fromRoute('view.topics.page_profile', array('user' => $profile_user_id));
      break;
    case 'views_block__groups_block_user_groups':
      $variables['subtitle'] = t('for this user');
      $variables['view_all_path'] = Url::fromRoute('view.groups.page_user_groups', array('user' => $profile_user_id));
      break;

    case 'views_block__group_members_block_newest_members':
      $variables['subtitle'] = t('in the group');
      $variables['view_all_path'] = '/group/'.$group->id().'/members';
      break;
    case 'views_block__upcoming_events_upcoming_events_group':
      $variables['subtitle'] = t('in the group');
      $variables['view_all_path'] = '/group/'.$group->id().'/events';
      break;
    case 'views_block__latest_topics_group_topics_block':
      $variables['subtitle'] = t('in the group');
      $variables['view_all_path'] = '/group/'.$group->id().'/topics';
      break;
  }
}

// @todo get the reference element in the svg

// function socialbase_preprocess_file_upload_help(&$variables) {
//   if (in_array('glyphicon-question-sign',   $variables['popover']['toggle']['#icon']['#attributes']['class'])) {
//     $variables['popover']['toggle']['#icon']['#tag'] = 'svg';
//     $variables['popover']['toggle']['#icon']['#attributes']['class'] = 'icon-small';
//     $variables['popover']['toggle']['#icon']['reference'] = [
//       '#type' => 'html_tag',
//       '#tag' => 'use',
//       '#value' => '',
//       '#attributes' => [
//         'xlink:href' => 'icon.svg#icon-help',
//       ],
//     ];
//
//   }
// }

/**
 * Implements hook_preprocess_details().
 */

function socialbase_preprocess_details(&$variables) {
  $variables['hide_header'] = FALSE;

  if(isset($variables['element']['#theme']) && $variables['element']['#theme'] == 'file_widget_multiple' ) {
    $variables['hide_header'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_container().
 */
function socialbase_preprocess_container(&$variables) {
  $variables['search_context'] = FALSE;
  $variables['has_floats'] = FALSE;

  // For pages in search we would like to render containers without divs.
  $routename = \Drupal::request()
    ->get(RouteObjectInterface::ROUTE_NAME);
  if (strpos($routename, 'search') !== FALSE) {
    $variables['search_context'] = TRUE;
  }

  if (isset($variables['element']['submit']['#button_type'])) {
    if ($variables['element']['submit']['#button_type'] == 'primary' && $variables['element']['#type'] == 'actions') {
      $variables['has_floats'] = TRUE;
    }
  }

  if (isset($variables['element']['cancel'])) {
    if ($variables['element']['cancel']['#type'] == 'link' && $variables['element']['#type'] == 'actions') {
      $variables['element']['cancel']['#attributes']['class'] = 'btn btn-flat';
    }
  }

  // Identify the container used for search in the navbar.
  if (isset($variables['element']['submit']['#suffix'])) {
    $icon_is_present = strpos($variables['element']['submit']['#suffix'], 'search-icon');

    if ($icon_is_present !== FALSE) {
      $variables['search_context'] = TRUE;
    }
  }

}

/**
 * Implements hook_preprocess_hook().
 */
function socialbase_preprocess_page_title(&$variables) {
  // Get the current path and if is it stream return a variable.
  $current_path = \Drupal::service('path.current')->getPath();
  if (strpos($current_path, 'stream') !== FALSE || strpos($current_path, 'explore') !== FALSE) {
    $variables['stream'] = TRUE;
  }

  // check if we are a node
  if (strpos($current_path, 'node') !== FALSE) {
    $variables['node'] = TRUE;
  }

  // check if we are on the node/edit or node/add
  if (strpos($current_path, 'edit') !== FALSE || strpos($current_path, 'add') !== FALSE) {
    $variables['edit'] = TRUE;
  }


}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(array('block-', '-'), array(
      '',
      '_'
    ), $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  // Lets add the form element parent to the theme suggestions.
  if (isset($variables['element']['#parents'][0])) {
    $hook = HtmlUtility::escape($variables['element']['#parents'][0]);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  // Lets add the the search_content_form as the only theme suggestion if it
  // really is the search_content_form.
  if ($variables['element']['#id'] == 'search-content-form') {
    $suggestions = array($variables['theme_hook_original'] . '__' . 'search_content_form');
  }

  // Alter comment form.
  if ($variables['element']['#id'] == 'comment-form') {
    if (\Drupal::routeMatch()->getRouteName() === 'entity.comment.edit_form') {
      $suggestions = array($variables['theme_hook_original'] . '__' . 'comment_form_edit');
    }
    else {
      $suggestions = array($variables['theme_hook_original'] . '__' . 'comment_form');
    }
  }

  // Also for the search hero content form on the /search/content.
  if ($variables['element']['#id'] == 'search-content-form-hero' || $variables['element']['#form_id'] == 'search_users_form' || $variables['element']['#form_id'] == 'search_groups_form') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'search_hero_form';
  }

  // Custom theme hook suggestion for user_anon.
  if ($variables['element']['#form_id'] == 'social_user_login_form' || $variables['element']['#form_id'] == 'user_register_form' || $variables['element']['#form_id'] == 'social_user_password_form') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'user_anonymous';
  }

  /* TODO: distinguish edit comment form from normal comment form in stream */
  if ($variables['element']['#form_id'] == 'comment_post_comment_form') {
    $suggestions[] = $variables['theme_hook_original'] . '__post_comment';
  }

  if ($variables['element']['#form_id'] == 'comment_post_comment_delete_form' || $variables['element']['#form_id'] == 'comment_comment_delete_form') {
    $suggestions[] = $variables['theme_hook_original'] . '__comment_edit';
  }
  // Add templates for post add/edit forms.
  if ($variables['element']['#form_id'] == 'social_post_entity_form') {
    if (\Drupal::routeMatch()->getRouteName() === 'entity.post.edit_form') {
      $suggestions[] = $variables['theme_hook_original'] . '__post_edit';
    }
    else {
      $suggestions[] = $variables['theme_hook_original'] . '__post_add';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#type'])) {
    // Override bootstrap base theme suggestions.
    switch ($variables['element']['#type']) {
      case 'radios':
          $suggestions[] = $variables['theme_hook_original'] . '__' . 'radios';
          $suggestions[] = 'fieldset__' . $variables['element']['#type'];
        break;
      case 'fieldset':
        $suggestions[] = 'bootstrap_panel';
        break;

      default:
        $suggestions[] = $variables['theme_hook_original'];
    }
  }
  else {
    $suggestions[] = $variables['theme_hook_original'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_links_alter(array &$suggestions, array $variables) {
  if ($variables['theme_hook_original'] == 'links__dropbutton__operations') {
    $suggestions[] = 'bootstrap_dropdown__operations';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_form_element_label_alter(array &$suggestions, array $variables) {
  // Lets add the form element parent to the theme suggestions.
  if (isset($variables['element']['#id'])) {
    if (strpos($variables['element']['#id'], 'field-visibility') !== FALSE) {
      $suggestions[] = $variables['theme_hook_original'] . '__' . 'dropdown';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $view_id = $variables['view']->id();
  $views_display = $variables['view']->getDisplay();
  if (!empty($views_display->display['id']) && $views_display->display['id'] == 'view_enrollments') {
    $suggestions[] = $variables['theme_hook_original'] . '__page';
  }

  if (!empty($views_display->display['id']) && $views_display->display['id'] == 'page_activity_stream' || $view_id == 'activity_stream_profile' || $view_id == 'activity_stream_group') {
    $suggestions[] = $variables['theme_hook_original'] . '__stream';
  }

  // For view notification_archive we need a separate template.
  if (!empty($views_display->display['id']) && $view_id == 'activity_stream_notifications' && $views_display->display['id'] == 'page_1') {
    $suggestions[] = $variables['theme_hook_original'] . '__stream_notifications';
  }

  // Remove extra wrapping divs for these views.
  if (!empty($view_id) && ($view_id == 'events' || $view_id == 'topics' || $view_id == 'groups')) {
    $suggestions[] = $variables['theme_hook_original'] . '__bare';
  }

  // List group views.
  if (!empty($view_id) && ($view_id == 'upcoming_events' || $view_id == 'latest_topics' || $view_id == 'newest_groups' || $view_id == 'newest_users' || $view_id == 'group_members')) {
    $suggestions[] = $variables['theme_hook_original'] . '__list_group';
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  // Lets add the form element parent to the theme suggestions.
  if (isset($variables['element']['#id'])) {
    if (strpos($variables['element']['#id'], 'field-visibility') !== FALSE) {
      $suggestions[] = $variables['theme_hook_original'] . '__' . 'dropdown';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function socialbase_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#type'])) {
    if ($variables['element']['#type'] == 'view') {
      $suggestions[] = $variables['theme_hook_original'] . '__view';
    }
  }
  if (isset($variables['element']['#parents'])) {
    if ($variables['element']['#parents'][0] == 'field_post_wrapper') {
      $suggestions[] = $variables['theme_hook_original'] . '__post';
    }
    if ($variables['element']['#parents'][0] == 'field_comment_body_wrapper') {
      $suggestions[] = $variables['theme_hook_original'] . '__' . 'comment_form';
    }
  }
  if (isset($variables['element']['submit']['#button_type'])) {
    if ($variables['element']['submit']['#button_type'] == 'flat') {
      $suggestions[] = $variables['theme_hook_original'] . '__' . 'comment_form';
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function socialbase_preprocess_field(&$variables) {
  // For each field that doesn't need a div to wrap the content in.
  switch ($variables['element']['#field_name']) {
    case 'field_profile_image':
    case 'field_profile_function':
    case 'field_profile_organization':
    case 'field_group_description':
    case 'field_group_address':
    case 'field_group_location':
    case 'field_group_image':
    case 'field_topic_image':
    case 'field_comment_body':
    case 'field_activity_output_text':
    case 'field_activity_entity':
      $variables['bare'] = TRUE;
      break;
  }

  switch ($variables['element']['#entity_type']) {
    case 'node':
    case 'post':
      $variables['bare'] = TRUE;
      break;
  }

  switch ($variables['element']['#formatter']) {
    case 'comment_default':
    case 'comment_group_content':
      $variables['node'] = TRUE;
      break;

    case 'comment_node':
      $variables['stream'] = TRUE;
      break;
  }

  if ($variables['element']['#formatter'] == 'comment_node') {
    $node = $variables['element']['#object'];
    $link_options = array(
      'fragment' => 'comment-form',
      'attributes' => array(
        'class' => array(
          'btn btn-block btn-link',
        ),
      ),
    );

    $urlwithoptions = $node->toUrl('canonical', $link_options);
    $variables['nodelink'] = Link::fromTextAndUrl('Comment', $urlwithoptions);
  }

}

/**
 * Implements hook_preprocess_page().
 */
function socialbase_preprocess_page(&$variables) {
  $variables['page_title'] = TRUE;

  // If we have the admin toolbar on screen we need overrides for our styles.
  if ($variables['is_admin']) {
    $variables['#attached']['library'][] = 'socialbase/admin';
  }
  // Add plain title for node preview page templates.
  if (!empty($variables['page']['#title'])) {
    $variables['plain_title'] = strip_tags($variables['page']['#title']);
  }

  $svg = file_get_contents(drupal_get_path('theme', 'socialbase') . '/images/icons.svg');
  $variables['svg_icons'] = t('svg', array('svg' => $svg));


  if ($node = \Drupal::routeMatch()->getParameter('node')) {;
    $content_type = $node->bundle();

    if ( $content_type == 'event' || $content_type == 'topic') {
      $variables['page_title'] = FALSE;
    }
  }

}



/**
 * Prepares variables for node templates.
 *
 * Default template: node.html.twig.
 *
 * Most themes use their own copy of node.html.twig. The default is located
 * inside "/core/modules/node/templates/node.html.twig". Look in there for the
 * full list of variables.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - node: The node object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function socialbase_preprocess_node(&$variables) {
  // Get current node.
  $node = $variables['node'];
  // Get current user.
  $account = \Drupal::currentUser();

  // Only add submitted data on teasers since we have the page hero block.
  if ($variables['view_mode'] === 'teaser') {
    $variables['display_submitted'] = TRUE;
  }
  if ($variables['view_mode'] === 'hero') {
    unset($variables['label']);
  }

  // Try to add unpublished as a article class for now when nodes are published
  // or unpublished.
  if (!$variables['elements']['#node']->isPublished()) {
    $variables['attributes']['class'][] = 'unpublished';
  }

  // Date formats.
  $date = $variables['node']->getCreatedTime();
  if ($variables['view_mode'] === 'small_teaser') {
    $variables['date'] = \Drupal::service('date.formatter')
      ->format($date, 'social_short_date');
  }
  // Teasers and activity stream.
  $teaser_view_modes = ['teaser', 'activity', 'activity_comment'];
  if (in_array($variables['view_mode'], $teaser_view_modes)) {
    $variables['date'] = \Drupal::service('date.formatter')
      ->format($date, 'social_medium_date');
  }

  // Content visibility.
  if ((isset($node->field_content_visibility)) && !$account->isAnonymous()) {
    $node_visibility_value = $node->field_content_visibility->getValue();
    $content_visibility = reset($node_visibility_value);
    switch ($content_visibility['value']) {
      case 'community':
        $variables['visibility_icon'] = 'group';
        $variables['visibility_label'] = t('community');
        break;

      case 'public':
        $variables['visibility_icon'] = 'public';
        $variables['visibility_label'] = t('public');
        break;
    }
  }

  if($node->getType() === 'event'){
    $variables['details_label'] = t('Event details');
  }
  if($node->getType() === 'topic') {
    $variables['details_label'] = t('Topic details');
  }

  if($node->status->value == NODE_NOT_PUBLISHED){
    $variables['status_label'] = t('unpublished');
  }

}

/**
 * Implements template_preprocess_image_style().
 */
function socialbase_preprocess_image_style(&$variables) {
  if ($variables['style_name'] == 'social_large') {
    $variables['image']['#attributes']['class'][] = 'img-circle';
  }
  if ($variables['style_name'] == 'social_medium') {
    $variables['image']['#attributes']['class'][] = 'img-medium';
    $variables['image']['#attributes']['class'][] = 'img-circle';
  }
  if ($variables['style_name'] == 'social_small') {
    $variables['image']['#attributes']['class'][] = 'img-small';
    $variables['image']['#attributes']['class'][] = 'img-circle';
  }

}

/**
 * Implements hook_preprocess_form_element().
 */
function socialbase_preprocess_form_element(&$variables) {
  if ($variables['element']['#type'] === 'vertical_tabs') {
    $variables['attributes']['class'][] = 'card';
  }
}

/**
 * Implements hook_preprocess_form_element_label().
 */
function socialbase_preprocess_form_element_label(&$variables) {
  if (isset($variables['element']['#id'])) {
    if (strpos($variables['element']['#id'], 'field-visibility') !== FALSE) {
      if (isset($variables['element']['#attributes']['title'])) {
        $description = $variables['element']['#attributes']['title'];
        $variables['element']['#attributes'] = [];
        $variables['description'] = $description;
      }
      // Set the materialize icon.
      $variables['material_icon'] = _socialbase_get_visibility_icon($variables['element']['#title']);
    }
  }
}

/**
 * Implements hook_preprocess_input().
 */
function socialbase_preprocess_input(&$variables) {
  if (isset($variables['element']['#type']) && $variables['element']['#type'] === 'radio') {
    // Only reaction on the visibility field.
    if (strpos($variables['element']['#id'], 'field-visibility') !== FALSE) {
      $title = $variables['element']['#title'];
      $variables['selected_material_icon'] = _socialbase_get_visibility_icon($title);
      if (isset($variables['element']['#return_value']) && isset($variables['element']['#default_value'])) {
        if ($variables['element']['#return_value'] === $variables['element']['#default_value']) {
          $variables['element']['active'] = 'active';
          $variables['active'] = 'active';
        }
      }
    }
  }

  if (isset($variables['element']['#array_parents'])) {
    if (in_array('save_modal', $variables['element']['#array_parents'])) {
      $variables['button_type'] = 'primary';
    }
  }

  if (isset($variables['element']['#addsearchicon']) && $variables['element']['#addsearchicon'] == TRUE) {
    $variables['add_search_icon'] = TRUE;
  }

  if (isset($variables['element']['#type']) && isset($variables['element']['#button_type'])) {
    if (!empty($variables['element']['#array_parents']) && in_array('actions', $variables['element']['#array_parents']) && $variables['element']['#button_type'] == 'primary') {
      $variables['float_right'] = TRUE;
    }

    if ($variables['element']['#type'] == 'submit' && $variables['element']['#button_type'] == 'danger') {
      $variables['element']['#button_type'] = 'default';
      $variables['button_type'] = 'default';
    }

  }

  // Make sure we can use a span class caret in the button.
  if (!empty($variables['element']['#attributes']['data-caret']) && $variables['element']['#attributes']['data-caret'] === 'true' ) {
    $variables['element']['caret'] = array(
      '#markup' => '<span class="caret"></span>',
    );
  }

}

/**
 * Implements hook_preprocess_dropdown().
 */
function socialbase_preprocess_dropdown(&$variables) {
  if (isset($variables['active']) && is_numeric($variables['active'])) {
    $title = $variables['element'][$variables['active']]['#title'];
    $selected_material_icon = _socialbase_get_visibility_icon($title);
  }
  $variables['selected_material_icon'] = isset($selected_material_icon) ? $selected_material_icon : '';
}

/**
 * Helper function to retrieve the icon string for a visibility title.
 *
 * @param string $title
 *   The title for the icon.
 *
 * @return string $icon
 *   The icon connected to the title.
 */
function _socialbase_get_visibility_icon($title) {
  // Set the materialize icon.
  switch ($title) {
    case 'Community':
      $icon = 'community';
      break;

    case 'Recipient':
      $icon = 'community';
      break;

    default:
      $icon = strtolower(HtmlUtility::escape($title));
  }

  return $icon;
}

/**
 * Implements hook_theme_suggestions_textarea_alter().
 */
function socialbase_theme_suggestions_textarea_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#parents'][0] == 'field_comment_body') {
    $suggestions[] = $variables['theme_hook_original'] . '__comment';
  }

  if ($variables['element']['#parents'][0] == 'field_post') {
    $suggestions[] = $variables['theme_hook_original'] . '__' . 'autogrow_full';
  }

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function socialbase_theme_suggestions_field_alter(array &$suggestions, array $variables) {

  if (!empty($variables['node']) && $variables['node'] == TRUE) {
    $suggestions[] = $variables['theme_hook_original'] . '__comment';
  }

}

/**
 * Allows sub-themes to alter the array used for colorizing text.
 *
 * @param array $texts
 *   An associative array containing the text and classes to be matched, passed
 *   by reference.
 *
 * @see \Drupal\bootstrap\Bootstrap::cssClassFromString()
 */
function socialbase_bootstrap_colorize_text_alter(&$texts) {
  $texts = [
    // Text that match these specific strings are checked first.
    'matches' => [
      // Primary class.
      t('Create new account')->render()   => 'primary',
      t('Log in')->render()               => 'primary',
      t('Cancel account')->render()       => 'primary',
    ],
    // Text containing these words anywhere in the string are checked last.
    'contains' => [
      t('Submit')->render() => 'primary',
      t('Enroll')->render() => 'accent btn-lg',
    ],
  ];
}

/**
 * Allows sub-themes to alter the array used for associating an icon with text.
 *
 * @param array $texts
 *   An associative array containing the text and icons to be matched, passed
 *   by reference.
 *
 * @see \Drupal\bootstrap\Bootstrap::glyphiconFromString()
 */
function socialbase_bootstrap_iconize_text_alter(&$texts) {
  $texts = [
    // Text that match these specific strings are checked first.
    'matches' => [],
    // Text containing these words anywhere in the string are checked last.
    'contains' => [
      t('Save')->render() => '',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_comment_alter().
 */
function socialbase_theme_suggestions_comment_alter(array &$suggestions, array $variables) {
  $comment = $variables['elements']['#comment'];
  if ($comment->hasParentComment()) {
    $suggestions[] = 'comment__child';
  }
}

/**
 * Implements template_preprocess_form().
 */
function socialbase_preprocess_form(&$variables) {
  $element = $variables['element'];
  $variables['attributes']['class'][] = 'clearfix';

  if ($element['#form_id'] === 'comment_comment_form' || $element['#form_id'] === 'comment_post_comment_form') {
    $current_user = \Drupal::currentUser();
    if ($current_user) {
      $storage = \Drupal::entityTypeManager()->getStorage('profile');
      if (!empty($storage)) {
        $user_profile = $storage->loadByUser($current_user, 'profile');
        if ($user_profile) {
          $content = \Drupal::entityTypeManager()
            ->getViewBuilder('profile')
            ->view($user_profile, 'compact');
          $variables['current_user_picture'] = $content;
        }
      }
    }

    // Comment edit form.
    if (\Drupal::routeMatch()->getRouteName() === 'entity.comment.edit_form') {
      $comment = \Drupal::routeMatch()->getParameter('comment');

      if (is_object($comment)) {
        // Display comment created date in format 'time ago'.
        $created_time_ago = \Drupal::service('date.formatter')
          ->formatTimeDiffSince($comment->getCreatedTime(), array('granularity' => 1, 'return_as_object' => TRUE));

        $submitted = t('@time ago', array('@time' => $created_time_ago->getString()));
        $variables['submitted'] = Link::fromTextAndUrl($submitted, $comment->urlInfo('canonical'));
        $variables['#cache']['max-age'] = $created_time_ago->getMaxAge();


        // Display author information.
        $account = $comment->getOwner();
        if ($account) {
          // Author profile picture.
          $storage = \Drupal::entityTypeManager()->getStorage('profile');
          if (!empty($storage)) {
            $user_profile = $storage->loadByUser($account, 'profile');
            if ($user_profile) {
              $content = \Drupal::entityTypeManager()
                ->getViewBuilder('profile')
                ->view($user_profile, 'compact');
              $variables['author_picture'] = $content;
            }
          }

          // Author name.
          $username = array(
            '#theme' => 'username',
            '#account' => $account,
          );
          $variables['author'] = drupal_render($username);
        }
      }

    }

  }

  if ($element['#form_id'] === 'social_post_entity_form') {

    if (\Drupal::routeMatch()->getRouteName() === 'entity.post.edit_form') {
      $post_id = $element['#post_id'];
      /** @var \Drupal\social_post\Entity\Post $post */
      $post = entity_load('post', $post_id);

      $form['#post_id'] = $post->id();
      // Display post created date in format 'time ago'.
      $created_time_ago = \Drupal::service('date.formatter')
        ->formatTimeDiffSince($post->getCreatedTime(), array('granularity' => 1, 'return_as_object' => TRUE));
      $date = t('%time ago', array('%time' => $created_time_ago->getString()));
      $variables['date']['#markup'] = $date;
      $variables['#cache']['max-age'] = $created_time_ago->getMaxAge();


      // To change user picture settings (e.g. image style), edit the 'compact'
      // view mode on the User entity. Note that the 'compact' view mode might
      // not be configured, so remember to always check the theme setting first.
      $account = $post->getOwner();
      if ($account) {
        $author_name = $account->getDisplayName();
        $variables['author_name']['#markup'] = $author_name;

        $storage = \Drupal::entityTypeManager()->getStorage('profile');
        if (!empty($storage)) {
          $user_profile = $storage->loadByUser($account, 'profile');
          if ($user_profile) {
            $content = \Drupal::entityTypeManager()
              ->getViewBuilder('profile')
              ->view($user_profile, 'compact');
            $variables['author_picture'] = $content;
          }
        }
      }
    }
  }

}

/**
 * Implements hook_preprocess_activity().
 */
function socialbase_preprocess_activity(&$variables) {
  // Check if the view mode is one of the notification view modes.
  if (in_array($variables['content']['field_activity_output_text']['#view_mode'], array('notification', 'notification_archive'))) {
    // Remove href from date.
    $variables['date'] = strip_tags($variables['date']->toString()->getGeneratedLink());
    // Remove href from output text.
    $variables['content']['field_activity_output_text'][0]['#text'] = strip_tags($variables['content']['field_activity_output_text'][0]['#text']);
    // Remove href from profile image.
    if (is_object($variables['actor'])) {
      $variables['actor'] = $variables['actor']->getText();
    }
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function socialbase_preprocess_file_upload_help (&$variables) {
  if(!empty($variables['popover'])) {
    //unset($variables['popover']['toggle']['#icon']);
    //$variables['popover']['toggle']['#attributes']['data-icon-type'] = 'help';
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function socialbase_preprocess_table(&$variables) {
  $variables['card'] = TRUE;
  $files_field = 'edit-field-files';
  if (!empty($variables['attributes']['id']) && (strpos($variables['attributes']['id'], $files_field) !== FALSE)) {
    $variables['attributes']['class'][] = 'tablesaw';
    $variables['attributes']['data-tablesaw-mode'] = 'stack';
    $variables['card'] = FALSE;
  }
}

function socialbase_preprocess_menu_local_action (&$variables) {
  if(\Drupal::routeMatch()->getRouteName() === 'entity.group_content.collection') {
    $link_classes = $variables['link']['#options']['attributes']['class'];
    foreach ($link_classes as $delta => $class_name) {
      if(in_array($class_name, array('btn-xs', 'btn-default'))){
        unset($link_classes[$delta]);
      }
    }
    $variables['link']['#options']['attributes']['class'] = $link_classes + array('waves-effect', 'waves-light', 'btn-sm', 'btn-primary', 'btn-raised');

    $variables['attributes']['class'][] = 'margin-bottom-l';
    $variables['attributes']['class'][] = 'margin-left-l';
 }
}

/**
 * Implements hook_preprocess_views_exposed_form().
 */
function socialbase_preprocess_views_exposed_form(&$variables) {
  if(isset($variables['theme_hook_original']) && $variables['theme_hook_original'] === 'views_exposed_form') {
    $variables['form']['actions']['submit']['#attributes']['class'][] = 'pull-right';
    $variables['form']['actions']['reset']['#attributes']['class'][] = 'btn-flat';
  }
}
