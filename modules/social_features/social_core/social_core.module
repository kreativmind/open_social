<?php

/**
 * @file
 * The Social core module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_theme().
 */
function social_core_theme() {
  return array(
    'page_hero_data' => array(
      'variables' => array(
        'title' => NULL,
        'author_name' => NULL,
        'created_date' => NULL,
        'created_date_formatted' => NULL,
        'topic_type' => NULL,
        'group_link' => NULL,
        'hero_node' => NULL,
        'default_page_title' => NULL,
        'section_class' => NULL,
        'event_enrollment' => NULL,
        'visibility_icon' => NULL,
        'visibility_label' => NULL,
        'hero_styled_image_url' => NULL,
      ),
    ),
  );
}

/**
 * Prepares variables for the social page hero data.
 *
 * Default template: page-hero-data.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - title: Page title as a string
 *   - author_name: Author as a string
 *   - created_date: Timestamp
 *   - created_date_formatted: Formatted date as a string
 *   - topic_type: List of topic types as an array or NULL
 *   - hero_node: Rendered hero display of the current active node or NULL.
 */
function template_preprocess_page_hero_data(&$variables) {
  // @todo create $variables['author_formatted']?
  // @todo Pass in all the page_title variables?

  // Get current user.
  $account = \Drupal::currentUser();

  // Get current node object or node id.
  $node = \Drupal::routeMatch()->getParameter('node');

  if (!is_object($node) && !is_null($node)) {
    $node = \Drupal::service('entity_type.manager')
      ->getStorage('node')
      ->load($node);
  }

  if (is_object($node)) {
    if (empty($variables['event_enrollment'])) {
      if ($node->getType() == 'event') {
        $form = \Drupal::formBuilder()
          ->getForm('Drupal\social_event\Form\EnrollActionForm');

        $render_array = array(
          'enroll_action_form' => $form,
        );

        $variables['event_enrollment'] = $render_array;
      }
    }

    // Add node edit url for management.
    if ($node instanceof Node) {
      if ($node->access('update', $account)) {
        $variables['node_edit_url'] = $node->toUrl('edit-form')->toString();
      }
    }

    // Content visibility.
    if ((isset($node->field_content_visibility)) && !$account->isAnonymous()) {
      $node_visibility_value = $node->field_content_visibility->getValue();
      $content_visibility = reset($node_visibility_value);
      switch ($content_visibility['value']) {
        case 'community':
          $variables['visibility_icon'] = 'group';
          $variables['visibility_label'] = t('community');
          break;

        case 'public':
          $variables['visibility_icon'] = 'public';
          $variables['visibility_label'] = t('public');
          break;
      }
    }

    // Add the hero styled image.
    $image_field = "field_{$node->getType()}_image";
    if (!empty($node->{$image_field}->entity)) {
      $variables['hero_styled_image_url'] = ImageStyle::load('social_xx_large')
        ->buildUrl($node->{$image_field}->entity->getFileUri());
    }

  }

  if (isset($variables['created_date']) && !isset($variables['created_date_formatted'])) {
    $variables['created_date_formatted'] = \Drupal::service('date.formatter')
      ->format($variables['created_date'], 'social_long_date');
  }

  if (isset($variables['topic_type'])) {
    $topic_type_entities = $variables['topic_type']->referencedEntities();
    if (count($topic_type_entities) === 1) {
      foreach ($topic_type_entities as $topic) {
        $topic_type_url = Url::fromRoute('view.latest_topics.page_latest_topics', array('field_topic_type_target_id' => $topic->id()));
        $topic_type_link = Link::fromTextAndUrl($topic->label(), $topic_type_url)
          ->toString();
        $variables['topic_type'] = $topic_type_link;
      }
    }
    else {
      $variables['topic_type'] = NULL;
    }
  }

  if (!empty($variables['default_page_title'])) {
    $variables['node'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * For Site information Site details form.
 */
function social_core_form_system_site_information_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide site slogan field and make it disabled as well whenever the user
  // is able to fill out the textfield.
  if (!empty($form['site_information']['site_slogan'])) {
    $form['site_information']['site_slogan']['#type'] = 'hidden';
    $form['site_information']['site_slogan']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_node_links_alter().
 */
function social_core_node_links_alter(array &$links, NodeInterface $entity, array &$context) {
  // Remove the comment links.
  unset($links['comment__field_topic_comments']);
  unset($links['comment__field_event_comments']);

  if (isset($context['view_mode']) && $context['view_mode'] === 'activity') {
    // Add a readmore link.
    $node_title_stripped = strip_tags($entity->label());
    $links['node']['#links']['node-readmore'] = array(
      'title' => t('Read more<span class="visually-hidden"> about @title</span>', array(
        '@title' => $node_title_stripped,
      )),
      'url' => $entity->urlInfo(),
      'language' => $entity->language(),
      'attributes' => array(
        'rel' => 'tag',
        'title' => $node_title_stripped,
      ),
    );
  }
}

/**
 * Prepares variables for comment field templates.
 *
 * Default template: field--comment.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing render arrays for the list of
 *     comments, and the comment form. Array keys: comments, comment_form.
 */
function social_core_preprocess_field(&$variables) {
  $element = $variables['element'];
  if ($element['#formatter'] == 'comment_node') {
    // Create separate variables for the more_link.
    $variables['more_link'] = $element[0]['more_link'];
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function social_core_menu_local_tasks_alter(&$data, $route_name) {
  $node = \Drupal::service('current_route_match')->getParameter('node');

  if (!is_null($node) && !is_object($node)) {
    $node = Node::load($node);
  }

  if ($node instanceof Node && ($node->getType() === 'event' || $node->getType() === 'topic')) {
    // Remove Edit tab. Edit will always go through Floating Edit Button.
    if (isset($data['tabs'][0]['entity.node.edit_form'])) {
      unset($data['tabs'][0]['entity.node.edit_form']);
    }
  }
  // Change the default 'View' tab title.
  if (isset($data['tabs'][0]['entity.node.canonical']['#link'])) {
    $data['tabs'][0]['entity.node.canonical']['#link']['title'] = t('Details');
  }

  // Remove Delete tab. Delete will always go through Edit.
  if (isset($data['tabs'][0]['entity.node.delete_form'])) {
    unset($data['tabs'][0]['entity.node.delete_form']);
  }

}
